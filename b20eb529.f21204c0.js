(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{147:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(2),r=n(9),i=(n(0),n(155)),o={title:"Mutations"},s={id:"usage/mutations",title:"Mutations",description:"In GraphQL, data in the server is updated using GraphQL Mutations. Mutations are read-write server operations, which both modify data in the backend, and allow querying for the modified data from the server in the same request.",source:"@site/docs/usage/mutations.md",permalink:"/svelte-relay/docs/usage/mutations",editUrl:"https://github.com/kesne/svelte-relay/edit/master/website/docs/usage/mutations.md",sidebar:"someSidebar",previous:{title:"Using Fragments",permalink:"/svelte-relay/docs/usage/using-fragments"},next:{title:"Powered by MDX",permalink:"/svelte-relay/docs/api-reference"}},c=[{value:"Waiting for Mutations",id:"waiting-for-mutations",children:[]},{value:"Reading Current Mutation State",id:"reading-current-mutation-state",children:[]}],l={rightToc:c};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In GraphQL, data in the server is updated using GraphQL Mutations. Mutations are read-write server operations, which both modify data in the backend, and allow querying for the modified data from the server in the same request."),Object(i.b)("p",null,"To set up a mutation in Svelte Relay, you can use the ",Object(i.b)("inlineCode",{parentName:"p"},"getMutation()")," function. This function accepts a GraphQL query, and returns a function that can be used to perform the mutation."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-svelte"}),"\x3c!-- UserFirstName.svelte --\x3e\n<script>\n    import { getMutation, graphql } from 'svelte-relay';\n\n    const commit = getMutation(graphql`\n        mutation UserFirstNameMutation($firstName: String!) {\n            setFirstName(firstName: $firstName) {\n                id\n                firstName\n            }\n        }\n    `);\n\n    let firstName = '';\n\n    function handleSubmit() {\n        commit({\n            variables: {\n                firstName,\n            }\n        })\n    }\n<\/script>\n\n<form on:submit|preventDefault={handleSubmit}>\n    First Name: <input bind:value={firstName} />\n    <button type=\"submit\">Save</button>\n</form>\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"After creating this file, you will need to run the ",Object(i.b)("inlineCode",{parentName:"p"},"relay-compiler")," to process the newly-created GraphQL query and generate the appropriate files.")),Object(i.b)("p",null,"The options that the ",Object(i.b)("inlineCode",{parentName:"p"},"commit()")," function accepts is the same as the Relay ",Object(i.b)("inlineCode",{parentName:"p"},"commitMutation()")," method. Read ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://relay.dev/docs/en/mutations"}),"the Relay Documentation for more details")," on these options.."),Object(i.b)("h2",{id:"waiting-for-mutations"},"Waiting for Mutations"),Object(i.b)("p",null,"Often, you will perform some action after a ",Object(i.b)("inlineCode",{parentName:"p"},"commit()")," succeeds or fails. For example, performing navigation to a new page, or displaying a toast to inform the user that the action completed successfully."),Object(i.b)("p",null,"To support these experiences, the return value from calling ",Object(i.b)("inlineCode",{parentName:"p"},"commit()")," is promise. This promise can be awaited, and will be resolved with the data returned from the server."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"async function handleSubmit() {\n    await commit({ variables });\n    navigate('/new/page');\n}\n")),Object(i.b)("p",null,"If an error occurs in the mutation, the promise will be rejected with the error. You can use try/catch to handle these errors."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"async function handleSubmit() {\n    try {\n        await commit({ variables });\n        navigate('/new/page');\n    } catch (e) {\n        displayToast(`An error ocurred: ${e.message}`);\n    }\n}\n")),Object(i.b)("h2",{id:"reading-current-mutation-state"},"Reading Current Mutation State"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"commit")," returned from ",Object(i.b)("inlineCode",{parentName:"p"},"getMutation()")," is a Svelte Store that contains state:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"isInFlight"))," - If the mutation HTTP request is currently in-flight. Starts with ",Object(i.b)("inlineCode",{parentName:"li"},"false"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"data"))," - The response data from the server if the mutation succeeds. Starts with ",Object(i.b)("inlineCode",{parentName:"li"},"undefined"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"error"))," - The error data from the server if the mutation fails. Starts with ",Object(i.b)("inlineCode",{parentName:"li"},"undefined"),".")),Object(i.b)("p",null,"This state is useful for loading state, disabling buttons, and showing success states in the UI when a commit succeeds."),Object(i.b)("p",null,"To read this state, you can use the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://svelte.dev/tutorial/auto-subscriptions"}),"Svelte Store Auto-subscriptions"),", and read the state by prefixing the variable with ",Object(i.b)("inlineCode",{parentName:"p"},"$"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-svelte"}),"<script>\n    import { getMutation, graphql } from 'svelte-relay';\n\n    const commit = getMutation(graphql`\n        mutation DoSomethingMutation {\n            doSomething\n        }\n    `);\n<\/script>\n\n{#if $commit.data}\n    <div>Commit completed!</div>\n{:else if $commit.error}\n    <div>Error: {$commit.error.message}</div>\n{:else}\n    <button disabled={$commit.isInFlight} on:click={() => commit()}>Commit</button>\n{/if}\n")))}u.isMDXComponent=!0},155:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=u(n),b=a,d=m["".concat(o,".").concat(b)]||m[b]||p[b]||i;return n?r.a.createElement(d,s(s({ref:t},l),{},{components:n})):r.a.createElement(d,s({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);