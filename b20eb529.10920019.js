(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{143:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var a=n(2),i=n(9),r=(n(0),n(153)),o={title:"Mutations"},s={id:"usage/mutations",title:"Mutations",description:"In GraphQL, data in the server is updated using GraphQL Mutations. Mutations are read-write server operations, which both modify data in the backend, and allow querying for the modified data from the server in the same request.",source:"@site/docs/usage/mutations.md",permalink:"/svelte-relay/docs/usage/mutations",editUrl:"https://github.com/kesne/svelte-relay/edit/master/website/docs/usage/mutations.md",sidebar:"someSidebar",previous:{title:"Using Fragments",permalink:"/svelte-relay/docs/usage/using-fragments"},next:{title:"API Reference",permalink:"/svelte-relay/docs/api-reference"}},c=[{value:"Waiting for Mutations",id:"waiting-for-mutations",children:[]},{value:"Reading Current Mutation State",id:"reading-current-mutation-state",children:[]}],m={rightToc:c};function l(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"In GraphQL, data in the server is updated using GraphQL Mutations. Mutations are read-write server operations, which both modify data in the backend, and allow querying for the modified data from the server in the same request."),Object(r.b)("p",null,"To set up a mutation in Svelte Relay, you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"getMutation()")," function. This function accepts a GraphQL query, and returns a function that can be used to perform the mutation."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-html",metastring:'title="UserFirstName.svelte"',title:'"UserFirstName.svelte"'}),"<script>\n    import { getMutation, graphql } from 'svelte-relay';\n\n    const commit = getMutation(graphql`\n        mutation UserFirstNameMutation($firstName: String!) {\n            setFirstName(firstName: $firstName) {\n                id\n                firstName\n            }\n        }\n    `);\n\n    let firstName = '';\n\n    function handleSubmit() {\n        commit({\n            variables: {\n                firstName,\n            }\n        })\n    }\n<\/script>\n\n<form on:submit|preventDefault={handleSubmit}>\n    First Name: <input bind:value={firstName} />\n    <button type=\"submit\">Save</button>\n</form>\n")),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"After creating this file, you will need to run the ",Object(r.b)("inlineCode",{parentName:"p"},"relay-compiler")," to process the newly-created GraphQL query and generate the appropriate files."))),Object(r.b)("p",null,"The options that the ",Object(r.b)("inlineCode",{parentName:"p"},"commit()")," function accepts is the same as the Relay ",Object(r.b)("inlineCode",{parentName:"p"},"commitMutation()")," method. Read ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://relay.dev/docs/en/mutations"}),"the Relay Documentation for more details")," on these options.."),Object(r.b)("h2",{id:"waiting-for-mutations"},"Waiting for Mutations"),Object(r.b)("p",null,"Often, you will perform some action after a ",Object(r.b)("inlineCode",{parentName:"p"},"commit()")," succeeds or fails. For example, performing navigation to a new page, or displaying a toast to inform the user that the action completed successfully."),Object(r.b)("p",null,"To support these experiences, the return value from calling ",Object(r.b)("inlineCode",{parentName:"p"},"commit()")," is promise. This promise can be awaited, and will be resolved with the data returned from the server."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"async function handleSubmit() {\n    await commit({ variables });\n    navigate('/new/page');\n}\n")),Object(r.b)("p",null,"If an error occurs in the mutation, the promise will be rejected with the error. You can use try/catch to handle these errors."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"async function handleSubmit() {\n    try {\n        await commit({ variables });\n        navigate('/new/page');\n    } catch (e) {\n        displayToast(`An error ocurred: ${e.message}`);\n    }\n}\n")),Object(r.b)("h2",{id:"reading-current-mutation-state"},"Reading Current Mutation State"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"commit")," returned from ",Object(r.b)("inlineCode",{parentName:"p"},"getMutation()")," is a Svelte Store that contains state:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"isInFlight"))," - If the mutation HTTP request is currently in-flight. Starts with ",Object(r.b)("inlineCode",{parentName:"li"},"false"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"data"))," - The response data from the server if the mutation succeeds. Starts with ",Object(r.b)("inlineCode",{parentName:"li"},"undefined"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"error"))," - The error data from the server if the mutation fails. Starts with ",Object(r.b)("inlineCode",{parentName:"li"},"undefined"),".")),Object(r.b)("p",null,"This state is useful for loading state, disabling buttons, and showing success states in the UI when a commit succeeds."),Object(r.b)("p",null,"To read this state, you can use the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://svelte.dev/tutorial/auto-subscriptions"}),"Svelte Store Auto-subscriptions"),", and read the state by prefixing the variable with ",Object(r.b)("inlineCode",{parentName:"p"},"$"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"<script>\n    import { getMutation, graphql } from 'svelte-relay';\n\n    const commit = getMutation(graphql`\n        mutation DoSomethingMutation {\n            doSomething\n        }\n    `);\n<\/script>\n\n{#if $commit.data}\n    <div>Commit completed!</div>\n{:else if $commit.error}\n    <div>Error: {$commit.error.message}</div>\n{:else}\n    <button disabled={$commit.isInFlight} on:click={() => commit()}>Commit</button>\n{/if}\n")))}l.isMDXComponent=!0}}]);