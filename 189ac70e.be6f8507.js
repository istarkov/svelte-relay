(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{133:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return d}));var n=a(2),r=a(9),i=(a(0),a(152)),s={title:"Making Queries"},o={id:"usage/making-queries",title:"Making Queries",description:"A GraphQL query is a request that can be sent to a GraphQL server in combination with a set of variables, in order to fetch some data. It consists of a selection of fields, and potentially includes other fragments.",source:"@site/docs/usage/making-queries.md",permalink:"/svelte-relay/docs/usage/making-queries",editUrl:"https://github.com/kesne/svelte-relay/edit/master/website/docs/usage/making-queries.md",sidebar:"someSidebar",previous:{title:"Providing The Environment",permalink:"/svelte-relay/docs/usage/providing-the-environment"},next:{title:"Using Fragments",permalink:"/svelte-relay/docs/usage/using-fragments"}},c=[{value:"Passing Variables",id:"passing-variables",children:[]}],l={rightToc:c};function d(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"A GraphQL query is a request that can be sent to a GraphQL server in combination with a set of variables, in order to fetch some data. It consists of a selection of fields, and potentially includes other fragments."),Object(i.b)("p",null,"To fetch and render a query in Svelte Relay, you can use the ",Object(i.b)("inlineCode",{parentName:"p"},"getQuery()")," function. This function accepts a GraphQL query. Let's set up our first query and a component to display the data:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html",metastring:'title="User.svelte"',title:'"User.svelte"'}),"<script>\n    import { getQuery, graphql } from 'svelte-relay';\n    const query = getQuery(graphql`\n        query UserQuery {\n            currentUser {\n                id\n                firstName\n                lastName\n            }\n        }\n    `);\n<\/script>\n")),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"After creating this file, you will need to run the ",Object(i.b)("inlineCode",{parentName:"p"},"relay-compiler")," to process the newly-created GraphQL query and generate the appropriate files."))),Object(i.b)("p",null,"To consume the data from the query, we can use the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://svelte.dev/tutorial/await-blocks"}),"Svelte await block"),". This allows us to wait for a Promise to resolve, and display different UIs based on the error or loading state."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html",metastring:'title="User.svelte"',title:'"User.svelte"'}),"{#await $query}\n<div>Loading...</div>\n{:then data}\n<h1>{data.currentUser.firstName} {data.currentUser.lastName}</h1>\n{:catch error}\n<div>Error: {error.message}</div>\n{/await}\n")),Object(i.b)("p",null,"The return value of ",Object(i.b)("inlineCode",{parentName:"p"},"getQuery()")," is a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://svelte.dev/tutorial/auto-subscriptions"}),"Svelte Store"),". By prefixing it with ",Object(i.b)("inlineCode",{parentName:"p"},"$"),", we automatically subscribe to the latest data from the GraphQL query."),Object(i.b)("h2",{id:"passing-variables"},"Passing Variables"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"getQuery()")," method accepts a second argument, which is the variables to provide to the query."))}d.isMDXComponent=!0}}]);